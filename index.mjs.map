{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar chisquare = require( '@stdlib/random-base-chisquare' ).factory;\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar copy = require( '@stdlib/utils-copy' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating t-distributed random numbers.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var t = factory( 1.0 );\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory();\n* var v = t( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar STATE;\n\tvar rnorm;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar FLG;\n\tvar v;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trnorm = randn( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isObject( arguments[ 0 ] ) ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\tv = arguments[ 0 ];\n\t\t\tif ( !isPositive( v ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number or an options object. Value: `' + v + '`.' );\n\t\t\t}\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. First argument must be a positive number. Value: `' + v + '`.' );\n\t\t}\n\t\topts = arguments[ 1 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option must be a Uint32Array. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trnorm = randn( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rnorm.state;\n\t\t\trnorm.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( v === void 0 ) {\n\t\tprng = t2;\n\t} else {\n\t\tprng = t1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 't' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide a Uint32Array. Value: `' + s + '`.' );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( v === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ v ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t1();\n\t* // returns <number>\n\t*/\n\tfunction t1() {\n\t\treturn rnorm() / sqrt( rchisq() / v );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t2( 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = t2( 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = t2( -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction t2( v ) {\n\t\tif (\n\t\t\tisnan( v ) ||\n\t\t\tv <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rnorm() / sqrt( rchisq( v ) / v );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t-distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-t\n*\n* @example\n* var t = require( '@stdlib/random-base-t' );\n*\n* var v = t( 2.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-t' ).factory;\n* var t = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-t' ).factory;\n* var t = factory({\n*     'seed': 297\n* });\n*\n* var v = t( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar t = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( t, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = t;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n*\n* @name t\n* @type {PRNG}\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = t( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = t( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = t( NaN );\n* // returns NaN\n*/\nvar t = factory();\n\n\n// EXPORTS //\n\nmodule.exports = t;\n"],"names":["setReadOnly","require$$0","setReadOnlyAccessor","require$$1","setReadWriteAccessor","require$$2","hasOwnProp","require$$3","isPositive","require$$4","isPrimitive","isObject","require$$5","isUint32Array","require$$6","isBoolean","require$$7","isnan","require$$8","isFunction","require$$9","constantFunction","require$$10","noop","require$$11","chisquare","require$$12","factory","randn","require$$13","gcopy","require$$14","Uint32Array","require$$15","copy","require$$16","typedarray2json","require$$17","sqrt","require$$18","factory_1","rchisq","STATE","rnorm","rand","opts","prng","FLG","v","arguments","length","TypeError","state","t2","t1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","s","out","name","NAME","params","NaN","t","lib"],"mappings":"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"}