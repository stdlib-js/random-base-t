{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isUint32Array from '@stdlib/assert-is-uint32array' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport noop from '@stdlib/utils-noop' ;\nimport { factory as chisquare } from '@stdlib/random-base-chisquare' ;\nimport { factory as randn } from '@stdlib/random-base-improved-ziggurat' ;\nimport gcopy from '@stdlib/blas-base-gcopy' ;\nimport Uint32Array from '@stdlib/array-uint32' ;\nimport copy from '@stdlib/utils-copy' ;\nimport typedarray2json from '@stdlib/array-to-json' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating t-distributed random numbers.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var t = factory( 1.0 );\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory();\n* var v = t( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar STATE;\n\tvar rnorm;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar FLG;\n\tvar v;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trnorm = randn( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isObject( arguments[ 0 ] ) ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0PS30', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0PS7M', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0PS7I', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\tv = arguments[ 0 ];\n\t\t\tif ( !isPositive( v ) ) {\n\t\t\t\tthrow new TypeError( format( '0PS7s', v ) );\n\t\t\t}\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( format( '0PS7P', v ) );\n\t\t}\n\t\topts = arguments[ 1 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0PS2h', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( '0PS30', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0PS7M', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0PS7I', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trnorm = randn( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rnorm.state;\n\t\t\trnorm.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( v === void 0 ) {\n\t\tprng = t2;\n\t} else {\n\t\tprng = t1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 't' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( '0PS7J', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( v === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ v ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t1();\n\t* // returns <number>\n\t*/\n\tfunction t1() {\n\t\treturn rnorm() / sqrt( rchisq() / v );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t2( 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = t2( 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = t2( -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction t2( v ) {\n\t\tif (\n\t\t\tisnan( v ) ||\n\t\t\tv <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rnorm() / sqrt( rchisq( v ) / v );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n*\n* @name t\n* @type {PRNG}\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = t( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = t( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = t( NaN );\n* // returns NaN\n*/\nvar t = factory();\n\n\n// EXPORTS //\n\nexport default t;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t-distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-t\n*\n* @example\n* import t from '@stdlib/random-base-t' ;\n*\n* var v = t( 2.0 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-t' ;\n* var t = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-t' ;\n* var t = factory({\n*     'seed': 297\n* });\n*\n* var v = t( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport t from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( t, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default t;\n"],"names":["factory","rchisq","STATE","rnorm","rand","opts","prng","FLG","v","arguments","length","randn","copy","isObject","hasOwnProp","isBoolean","TypeError","format","isFunction","isUint32Array","state","gcopy","Uint32Array","isPositive","chisquare","t2","t1","PRNG","setReadOnly","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","s","out","name","NAME","typedarray2json","params","sqrt","isnan","NaN","t"],"mappings":"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"}