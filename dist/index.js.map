{
  "version": 3,
  "sources": ["../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar chisquare = require( '@stdlib/random-base-chisquare' ).factory;\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar assign = require( '@stdlib/object-assign' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating t-distributed random numbers.\n*\n* @param {PositiveNumber} [v] - degrees of freedom\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `v` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var t = factory( 1.0 );\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory( 0.5, {\n*     'seed': 297\n* });\n* var v = t();\n* // returns <number>\n*\n* @example\n* var t = factory();\n* var v = t( 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rchisq;\n\tvar STATE;\n\tvar rnorm;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar FLG;\n\tvar v;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trnorm = randn( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isObject( arguments[ 0 ] ) ) {\n\t\t\topts = arguments[ 0 ];\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trnorm = randn({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trnorm = randn( opts );\n\t\t\t}\n\t\t} else {\n\t\t\tv = arguments[ 0 ];\n\t\t\tif ( !isPositive( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number or an options object. Value: `%s`.', v ) );\n\t\t\t}\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trnorm = randn( opts );\n\t\t}\n\t} else {\n\t\tv = arguments[ 0 ];\n\t\tif ( !isPositive( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', v ) );\n\t\t}\n\t\topts = arguments[ 1 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trnorm = randn({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trnorm = randn( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rnorm.state;\n\t\t\trnorm.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( v === void 0 ) {\n\t\t\trchisq = chisquare({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trchisq = chisquare( v, {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( v === void 0 ) {\n\t\tprng = t2;\n\t} else {\n\t\tprng = t1;\n\t}\n\trand = rnorm.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 't' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( v === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ v ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with bound degrees of freedom `v`.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t1();\n\t* // returns <number>\n\t*/\n\tfunction t1() {\n\t\treturn rnorm() / sqrt( rchisq() / v );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} v - degrees of freedom\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = t2( 3.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = t2( 0.0 );\n\t* // returns NaN\n\t*\n\t* @example\n\t* var v = t2( -1.5 );\n\t* // returns NaN\n\t*/\n\tfunction t2( v ) {\n\t\tif (\n\t\t\tisnan( v ) ||\n\t\t\tv <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rnorm() / sqrt( rchisq( v ) / v );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a Student's t-distribution with degrees of freedom `v`.\n*\n* @name t\n* @type {PRNG}\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = t( 3.0 );\n* // returns <number>\n*\n* @example\n* var v = t( 0.0 );\n* // returns NaN\n*\n* @example\n* var v = t( NaN );\n* // returns NaN\n*/\nvar t = factory();\n\n\n// EXPORTS //\n\nmodule.exports = t;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t-distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-t\n*\n* @example\n* var t = require( '@stdlib/random-base-t' );\n*\n* var v = t( 2.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-t' ).factory;\n* var t = factory( 3.0, {\n*     'seed': 297\n* });\n*\n* var v = t();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-t' ).factory;\n* var t = factory({\n*     'seed': 297\n* });\n*\n* var v = t( 2.0 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isPositive", "isObject", "isUint32Array", "isBoolean", "isnan", "isFunction", "constantFunction", "noop", "chisquare", "randn", "gcopy", "Uint32Array", "assign", "typedarray2json", "format", "sqrt", "factory", "rchisq", "STATE", "rnorm", "rand", "opts", "prng", "FLG", "v", "t2", "t1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "require_main", "__commonJSMin", "exports", "module", "factory", "t", "setReadOnly", "main", "factory"]
}
